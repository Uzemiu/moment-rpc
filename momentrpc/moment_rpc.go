// Code generated by goctl. DO NOT EDIT!
// Source: moment.proto

package momentrpc

import (
	"context"

	"github.com/xh-polaris/moment-rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteMomentReq  = pb.DeleteMomentReq
	DeleteMomentResp = pb.DeleteMomentResp
	GetMomentReq     = pb.GetMomentReq
	GetMomentResp    = pb.GetMomentResp
	InsertMomentReq  = pb.InsertMomentReq
	InsertMomentResp = pb.InsertMomentResp
	Moment           = pb.Moment
	QueryMomentReq   = pb.QueryMomentReq
	QueryMomentResp  = pb.QueryMomentResp
	UpdateMomentReq  = pb.UpdateMomentReq
	UpdateMomentResp = pb.UpdateMomentResp

	MomentRpc interface {
		GetMoment(ctx context.Context, in *GetMomentReq, opts ...grpc.CallOption) (*GetMomentResp, error)
		QueryMoment(ctx context.Context, in *QueryMomentReq, opts ...grpc.CallOption) (*QueryMomentResp, error)
		InsertMoment(ctx context.Context, in *InsertMomentReq, opts ...grpc.CallOption) (*InsertMomentResp, error)
		UpdateMoment(ctx context.Context, in *UpdateMomentReq, opts ...grpc.CallOption) (*UpdateMomentResp, error)
		DeleteMoment(ctx context.Context, in *DeleteMomentReq, opts ...grpc.CallOption) (*DeleteMomentResp, error)
	}

	defaultMomentRpc struct {
		cli zrpc.Client
	}
)

func NewMomentRpc(cli zrpc.Client) MomentRpc {
	return &defaultMomentRpc{
		cli: cli,
	}
}

func (m *defaultMomentRpc) GetMoment(ctx context.Context, in *GetMomentReq, opts ...grpc.CallOption) (*GetMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.GetMoment(ctx, in, opts...)
}

func (m *defaultMomentRpc) QueryMoment(ctx context.Context, in *QueryMomentReq, opts ...grpc.CallOption) (*QueryMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.QueryMoment(ctx, in, opts...)
}

func (m *defaultMomentRpc) InsertMoment(ctx context.Context, in *InsertMomentReq, opts ...grpc.CallOption) (*InsertMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.InsertMoment(ctx, in, opts...)
}

func (m *defaultMomentRpc) UpdateMoment(ctx context.Context, in *UpdateMomentReq, opts ...grpc.CallOption) (*UpdateMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.UpdateMoment(ctx, in, opts...)
}

func (m *defaultMomentRpc) DeleteMoment(ctx context.Context, in *DeleteMomentReq, opts ...grpc.CallOption) (*DeleteMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.DeleteMoment(ctx, in, opts...)
}
