// Code generated by goctl. DO NOT EDIT!
// Source: moment.proto

package server

import (
	"context"

	"github.com/Uzemiu/moment-rpc/internal/logic"
	"github.com/Uzemiu/moment-rpc/internal/svc"
	"github.com/Uzemiu/moment-rpc/pb"
)

type MomentRpcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedMomentRpcServer
}

func NewMomentRpcServer(svcCtx *svc.ServiceContext) *MomentRpcServer {
	return &MomentRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *MomentRpcServer) GetMoment(ctx context.Context, in *pb.GetMomentReq) (*pb.GetMomentResp, error) {
	l := logic.NewGetMomentLogic(ctx, s.svcCtx)
	return l.GetMoment(in)
}

func (s *MomentRpcServer) QueryMoment(ctx context.Context, in *pb.QueryMomentReq) (*pb.QueryMomentResp, error) {
	l := logic.NewQueryMomentLogic(ctx, s.svcCtx)
	return l.QueryMoment(in)
}

func (s *MomentRpcServer) InsertMoment(ctx context.Context, in *pb.InsertMomentReq) (*pb.InsertMomentResp, error) {
	l := logic.NewInsertMomentLogic(ctx, s.svcCtx)
	return l.InsertMoment(in)
}

func (s *MomentRpcServer) UpdateMoment(ctx context.Context, in *pb.UpdateMomentReq) (*pb.UpdateMomentResp, error) {
	l := logic.NewUpdateMomentLogic(ctx, s.svcCtx)
	return l.UpdateMoment(in)
}

func (s *MomentRpcServer) DeleteMoment(ctx context.Context, in *pb.DeleteMomentReq) (*pb.DeleteMomentResp, error) {
	l := logic.NewDeleteMomentLogic(ctx, s.svcCtx)
	return l.DeleteMoment(in)
}
